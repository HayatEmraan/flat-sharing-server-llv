// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  CONFIRMED
  REJECTED
}

enum Role {
  user
  admin
}

enum Active {
  activate
  deactivate
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique @db.VarChar(255)
  email       String       @unique @db.VarChar(255)
  role        Role         @default(user)
  password    String
  isActive    Active       @default(activate)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userprofile UserProfile?
  booking     Booking[]
  Flat        Flat[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  bio        String?  @db.VarChar(255)
  name       String   @db.VarChar(255)
  profession String?  @db.VarChar(255)
  address    String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("userprofiles")
}

model Flat {
  id               String      @id @default(uuid())
  numberOfBedrooms Int         @db.Integer
  briefDescription String      @db.Text
  location         String      @db.VarChar(255)
  price            Int         @db.Integer
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  booking          Booking[]
  amenities        Amenities[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("flats")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  flatId    String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flat Flat @relation(fields: [flatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("bookings")
}

model Amenities {
  id     String @id @default(uuid())
  image  String
  name   String @db.VarChar(255)
  flatId String
  flat   Flat   @relation(fields: [flatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("amenities")
}
